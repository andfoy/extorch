/// Check if two tensors are close (element-wise).
fn allclose(
    input: &SharedPtr<CrossTensor>,
    other: &SharedPtr<CrossTensor>,
    rtol: f64,
    atol: f64,
    equal_nan: bool,
) -> Result<bool>;

/// Return the indices used to sort a tensor in a given dimension.
fn argsort(
    input: &SharedPtr<CrossTensor>,
    dim: i64,
    descending: bool,
    stable: bool,
) -> Result<SharedPtr<CrossTensor>>;

/// Sort a tensor along a dimension.
fn sort(
    input: &SharedPtr<CrossTensor>,
    dim: i64,
    descending: bool,
    stable: bool,
    out: SortResult,
) -> Result<SortResult>;

/// Compare two tensors for equality element-wise.
fn eq(
    input: &SharedPtr<CrossTensor>,
    other: &SharedPtr<CrossTensor>,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Compare two tensors for strict element and size equality.
fn equal(input: &SharedPtr<CrossTensor>, other: &SharedPtr<CrossTensor>) -> Result<bool>;

/// Compute `input >= other` element-wise.
fn ge(
    input: &SharedPtr<CrossTensor>,
    other: &SharedPtr<CrossTensor>,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Compute `input > other` element-wise.
fn gt(
    input: &SharedPtr<CrossTensor>,
    other: &SharedPtr<CrossTensor>,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Compute `input <= other` element-wise.
fn le(
    input: &SharedPtr<CrossTensor>,
    other: &SharedPtr<CrossTensor>,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Compute `input < other` element-wise.
fn lt(
    input: &SharedPtr<CrossTensor>,
    other: &SharedPtr<CrossTensor>,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Compute `input != other` element-wise.
fn ne(
    input: &SharedPtr<CrossTensor>,
    other: &SharedPtr<CrossTensor>,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Check which elements between two tensors are close.
fn isclose(
    input: &SharedPtr<CrossTensor>,
    other: &SharedPtr<CrossTensor>,
    rtol: f64,
    atol: f64,
    equal_nan: bool,
) -> Result<SharedPtr<CrossTensor>>;

/// Check which elements in a tensor are finite.
fn isfinite(input: &SharedPtr<CrossTensor>) -> Result<SharedPtr<CrossTensor>>;

/// Check which elements in a tensor are infinite (positive or negative).
fn isinf(input: &SharedPtr<CrossTensor>) -> Result<SharedPtr<CrossTensor>>;

/// Check which elements in a tensor are positive infinite.
fn isposinf(input: &SharedPtr<CrossTensor>) -> Result<SharedPtr<CrossTensor>>;

/// Check which elements in a tensor are negative infinite.
fn isneginf(input: &SharedPtr<CrossTensor>) -> Result<SharedPtr<CrossTensor>>;

/// Check which elements in a tensor are NaN.
fn isnan(input: &SharedPtr<CrossTensor>) -> Result<SharedPtr<CrossTensor>>;

/// Check which elements in a tensor are real.
fn isreal(input: &SharedPtr<CrossTensor>) -> Result<SharedPtr<CrossTensor>>;

/// Check if the values of a given tensor are in another tensor.
fn isin(
    elements: &SharedPtr<CrossTensor>,
    test_elements: &SharedPtr<CrossTensor>,
    assume_unique: bool,
    invert: bool,
) -> Result<SharedPtr<CrossTensor>>;

/// Find the k-th smallest values of a tensor alongside a dimension.
fn kthvalue(
    input: &SharedPtr<CrossTensor>,
    k: i64,
    dim: i64,
    keepdim: bool,
    out: SortResult,
) -> Result<SortResult>;

/// Pick the maximum (element-wise) between two tensors.
fn maximum(
    input: &SharedPtr<CrossTensor>,
    other: &SharedPtr<CrossTensor>,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Pick the minimum (element-wise) between two tensors.
fn minimum(
    input: &SharedPtr<CrossTensor>,
    other: &SharedPtr<CrossTensor>,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Pick the maximum (element-wise) between two tensors, taking into account NaNs.
fn fmax(
    input: &SharedPtr<CrossTensor>,
    other: &SharedPtr<CrossTensor>,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Pick the minimum (element-wise) between two tensors, taking into account NaNs.
fn fmin(
    input: &SharedPtr<CrossTensor>,
    other: &SharedPtr<CrossTensor>,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;
