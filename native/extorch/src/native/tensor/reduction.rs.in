/// Check if all elements in a tensor (or dimension) are true.
fn all(
    input: &SharedPtr<CrossTensor>,
    dim: OptionalInt,
    keepdim: bool,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Check if any element in a tensor (or dimension) is true.
fn any(
    input: &SharedPtr<CrossTensor>,
    dim: OptionalInt,
    keepdim: bool,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Find the index of the maximum value of a tensor (or dimension).
fn argmax(
    input: &SharedPtr<CrossTensor>,
    dim: OptionalInt,
    keepdim: bool,
) -> Result<SharedPtr<CrossTensor>>;

/// Find the index of the minimum value of a tensor (or dimension).
fn argmin(
    input: &SharedPtr<CrossTensor>,
    dim: OptionalInt,
    keepdim: bool,
) -> Result<SharedPtr<CrossTensor>>;

/// Find the maximum value of a tensor (or in dimension).
fn max(
    input: &SharedPtr<CrossTensor>,
    dim: OptionalInt,
    keepdim: bool,
    out: TensorTuple,
) -> Result<TensorTuple>;

/// Find the maximum value of a tensor (or in dimension).
fn min(
    input: &SharedPtr<CrossTensor>,
    dim: OptionalInt,
    keepdim: bool,
    out: TensorTuple,
) -> Result<TensorTuple>;

/// Find the maximum values of each slice in the given dimensions.
fn amax(
    input: &SharedPtr<CrossTensor>,
    dim: Vec<i64>,
    keepdim: bool,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Find the maximum values of each slice in the given dimensions.
fn amin(
    input: &SharedPtr<CrossTensor>,
    dim: Vec<i64>,
    keepdim: bool,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Find the minimum and maximum values in the given dimension.
fn aminmax(
    input: &SharedPtr<CrossTensor>,
    dim: OptionalInt,
    keepdim: bool,
    out: TensorTuple,
) -> Result<TensorTuple>;

/// Compute the p-norm between two tensors.
fn dist(
    input: &SharedPtr<CrossTensor>,
    other: &SharedPtr<CrossTensor>,
    p: Scalar
) -> Result<SharedPtr<CrossTensor>>;

/// Compute the log-sum-exp reduction across dimensions.
fn logsumexp(
    input: &SharedPtr<CrossTensor>,
    dim: Vec<i64>,
    keepdim: bool,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Sum a tensor elements across dimensions.
fn sum(
    input: &SharedPtr<CrossTensor>,
    dim: Vec<i64>,
    keepdim: bool
) -> Result<SharedPtr<CrossTensor>>;

/// Sum a tensor elements across dimensions, treating zeros as NaNs.
fn nansum(
    input: &SharedPtr<CrossTensor>,
    dim: Vec<i64>,
    keepdim: bool
) -> Result<SharedPtr<CrossTensor>>;

/// Compute the mean of tensor elements across dimensions.
fn mean(
    input: &SharedPtr<CrossTensor>,
    dim: Vec<i64>,
    keepdim: bool,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Compute the mean (ignoring NaNs) of tensor elements across dimensions.
fn nanmean(
    input: &SharedPtr<CrossTensor>,
    dim: Vec<i64>,
    keepdim: bool,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Find the median value of a tensor in the given dimension.
fn median(
    input: &SharedPtr<CrossTensor>,
    dim: OptionalInt,
    keepdim: bool,
    out: TensorTuple,
) -> Result<TensorTuple>;

/// Find the median value of a tensor (ignoring NaNs) in the given dimension.
fn nanmedian(
    input: &SharedPtr<CrossTensor>,
    dim: OptionalInt,
    keepdim: bool,
    out: TensorTuple,
) -> Result<TensorTuple>;

/// Find the mode value of a tensor in the given dimension.
fn mode(
    input: &SharedPtr<CrossTensor>,
    dim: i64,
    keepdim: bool,
    out: TensorTuple,
) -> Result<TensorTuple>;

/// Multiply a tensor elements across dimensions.
fn prod(
    input: &SharedPtr<CrossTensor>,
    dim: OptionalInt,
    keepdim: bool
) -> Result<SharedPtr<CrossTensor>>;

/// Compute the quantiles of each row of a tensor in a given dimension.
fn quantile(
    input: &SharedPtr<CrossTensor>,
    q: &SharedPtr<CrossTensor>,
    dim: OptionalInt,
    keepdim: bool,
    interpolation: String,
    out: TensorOut
) -> Result<SharedPtr<CrossTensor>>;

/// Compute the quantiles of each row of a tensor in a given dimension, ignoring NaNs.
fn nanquantile(
    input: &SharedPtr<CrossTensor>,
    q: &SharedPtr<CrossTensor>,
    dim: OptionalInt,
    keepdim: bool,
    interpolation: String,
    out: TensorOut
) -> Result<SharedPtr<CrossTensor>>;

/// Compute the standard deviation of a tensor elements across dimensions.
fn std_dev(
    input: &SharedPtr<CrossTensor>,
    dim: Vec<i64>,
    correction: i64,
    keepdim: bool,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Compute the standard deviation and mean of a tensor elements across dimensions.
fn std_mean(
    input: &SharedPtr<CrossTensor>,
    dim: Vec<i64>,
    correction: i64,
    keepdim: bool,
    out: TensorTuple,
) -> Result<TensorTuple>;

/// Return the unique elements of a tensor across a dimension or all.
fn unique(
    input: &SharedPtr<CrossTensor>,
    sorted: bool,
    return_inverse: bool,
    return_counts: bool,
    dim: OptionalInt
) -> Result<TensorTuple>;

/// Find the unique elements from every consecutive group of a tensor across a dimension or all.
fn unique_consecutive(
    input: &SharedPtr<CrossTensor>,
    return_inverse: bool,
    return_counts: bool,
    dim: OptionalInt
) -> Result<TensorTuple>;

/// Compute the variance of a tensor elements across dimensions.
fn var(
    input: &SharedPtr<CrossTensor>,
    dim: Vec<i64>,
    correction: i64,
    keepdim: bool,
    out: TensorOut,
) -> Result<SharedPtr<CrossTensor>>;

/// Compute the variance and mean of a tensor elements across dimensions.
fn var_mean(
    input: &SharedPtr<CrossTensor>,
    dim: Vec<i64>,
    correction: i64,
    keepdim: bool,
    out: TensorTuple,
) -> Result<TensorTuple>;

/// Count the total non-zero elements of a tensor across dimensions.
fn count_nonzero(
    input: &SharedPtr<CrossTensor>,
    dim: Vec<i64>
) -> Result<SharedPtr<CrossTensor>>;
