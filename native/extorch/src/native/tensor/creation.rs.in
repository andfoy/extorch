/// Create an empty tensor.
fn empty(
    dims: Vec<i64>,
    s_dtype: String,
    s_layout: String,
    s_device: Device,
    requires_grad: bool,
    pin_memory: bool,
    s_mem_fmt: String,
) -> Result<SharedPtr<CrossTensor>>;

/// Create a tensor filled with zeros.
fn zeros(
    dims: Vec<i64>,
    s_dtype: String,
    s_layout: String,
    s_device: Device,
    requires_grad: bool,
    pin_memory: bool,
    s_mem_fmt: String,
) -> Result<SharedPtr<CrossTensor>>;

/// Create a tensor filled with ones.
fn ones(
    dims: Vec<i64>,
    s_dtype: String,
    s_layout: String,
    s_device: Device,
    requires_grad: bool,
    pin_memory: bool,
    s_mem_fmt: String,
) -> Result<SharedPtr<CrossTensor>>;

/// Create a tensor filled with a scalar value.
fn full(
    dims: Vec<i64>,
    value: Scalar,
    s_dtype: String,
    s_layout: String,
    s_device: Device,
    requires_grad: bool,
    pin_memory: bool,
    s_mem_fmt: String,
) -> Result<SharedPtr<CrossTensor>>;

/// Create a tensor initialized with random values.
fn rand(
    dims: Vec<i64>,
    s_dtype: String,
    s_layout: String,
    s_device: Device,
    requires_grad: bool,
    pin_memory: bool,
    s_mem_fmt: String,
) -> Result<SharedPtr<CrossTensor>>;

/// Create a tensor initialized with random normal values.
fn randn(
    dims: Vec<i64>,
    s_dtype: String,
    s_layout: String,
    s_device: Device,
    requires_grad: bool,
    pin_memory: bool,
    s_mem_fmt: String,
) -> Result<SharedPtr<CrossTensor>>;

/// Create a tensor filled with random values ranging from `low` to `high`
fn randint(
    low: i64,
    high: i64,
    dims: Vec<i64>,
    s_dtype: String,
    s_layout: String,
    s_device: Device,
    requires_grad: bool,
    pin_memory: bool,
    s_mem_fmt: String,
) -> Result<SharedPtr<CrossTensor>>;

/// Create a two-dimensional identity matrix of size nxm.
fn eye(
    n: i64,
    m: i64,
    s_dtype: String,
    s_layout: String,
    s_device: Device,
    requires_grad: bool,
    pin_memory: bool,
    s_mem_fmt: String,
) -> Result<SharedPtr<CrossTensor>>;

/// Create a 1D tensor containing values from `start` to `end` (non-inclusive)
/// spaced by `step`.
fn arange(
    start: Scalar,
    end: Scalar,
    step: Scalar,
    s_dtype: String,
    s_layout: String,
    s_device: Device,
    requires_grad: bool,
    pin_memory: bool,
    s_mem_fmt: String,
) -> Result<SharedPtr<CrossTensor>>;

/// Create a 1D tensor containing a `steps` number of values between `start`
/// and `end`.
fn linspace(
    start: Scalar,
    end: Scalar,
    steps: i64,
    s_dtype: String,
    s_layout: String,
    s_device: Device,
    requires_grad: bool,
    pin_memory: bool,
    s_mem_fmt: String,
) -> Result<SharedPtr<CrossTensor>>;

/// Create a 1D tensor containing a `steps` number of values between
/// `start` and `end`. The values are spaced on a logarithmic scale.
fn logspace(
    start: Scalar,
    end: Scalar,
    steps: i64,
    base: Scalar,
    s_dtype: String,
    s_layout: String,
    s_device: Device,
    requires_grad: bool,
    pin_memory: bool,
    s_mem_fmt: String,
) -> Result<SharedPtr<CrossTensor>>;

/// Create a n-dimensional tensor from a list of scalars.
fn tensor(
    list: ScalarList,
    s_dtype: String,
    s_layout: String,
    s_device: Device,
    requires_grad: bool,
    pin_memory: bool,
    s_mem_fmt: String,
) -> Result<SharedPtr<CrossTensor>>;

/// Create a complex tensor with real and imaginary parts.
fn complex(
    real: &SharedPtr<CrossTensor>,
    imag: &SharedPtr<CrossTensor>,
) -> Result<SharedPtr<CrossTensor>>;

/// Create a polar complex tensor with magnitude and phase parts.
fn polar(
    abs: &SharedPtr<CrossTensor>,
    angle: &SharedPtr<CrossTensor>,
) -> Result<SharedPtr<CrossTensor>>;

/// Create an empty tensor with the same shape as the input.
fn empty_like(input: &SharedPtr<CrossTensor>) -> Result<SharedPtr<CrossTensor>>;

/// Create a tensor filled with random values with the same shape as the input.
fn rand_like(input: &SharedPtr<CrossTensor>) -> Result<SharedPtr<CrossTensor>>;

/// Create a tensor filled with random (normal) values with the same shape as the input.
fn randn_like(input: &SharedPtr<CrossTensor>) -> Result<SharedPtr<CrossTensor>>;

/// Create a tensor filled with random integers between `low` and `high`
fn randint_like(input: &SharedPtr<CrossTensor>, low: i64, high: i64) -> Result<SharedPtr<CrossTensor>>;

/// Create a tensor filled with a scalar with the same shape as the input.
fn full_like(input: &SharedPtr<CrossTensor>, value: Scalar) -> Result<SharedPtr<CrossTensor>>;

/// Create a tensor filled with zeros with the same shape as the input.
fn zeros_like(input: &SharedPtr<CrossTensor>) -> Result<SharedPtr<CrossTensor>>;

/// Create a tensor filled with ones with the same shape as the input.
fn ones_like(input: &SharedPtr<CrossTensor>) -> Result<SharedPtr<CrossTensor>>;
