
/// Shared interface to a tensor pointer in memory.
struct CrossTensorRef {
    tensor: SharedPtr<CrossTensor>,
}

/// Torch tensor device descriptor.
struct Device {
    device: String,
    index: i64,
}

/// Scalar number representation
struct Scalar {
    _repr: Vec<u8>,
    entry_used: String
}

struct ScalarList {
    list: Vec<Scalar>,
    size: Vec<i64>
}

struct TorchSlice {
    start: i64,
    stop: i64,
    step: i64,
    enc: u8
}

struct TorchIndex {
    integer: i64,
    boolean: bool,
    slice: TorchSlice,
    tensor: SharedPtr<CrossTensor>,
    type_: i64
}

struct PrintOptions {
    precision: i64,
    threshold: f64,
    edgeitems: i64,
    linewidth: i64,
    sci_mode: u8
}

struct SortResult {
    values: SharedPtr<CrossTensor>,
    indices: SharedPtr<CrossTensor>,
    used: bool
}

struct OptionalInt {
    value: i64,
    used: bool
}

struct TensorOut {
    tensor: SharedPtr<CrossTensor>,
    used: bool
}
